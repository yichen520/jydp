<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper PUBLIC 
        "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.jydp.dao.impl.user.UserCurrencyNumDaoImpl">

    <select id="UserCurrencyNum_getUserCurrencyNumByUserId" parameterType="int" resultType="UserCurrencyNumDO">
        SELECT userId, currencyId, currencyNumber, currencyNumberLock, addTime
        FROM user_currency_num_tab
        WHERE userId = #{userId}
        ORDER BY currencyId
    </select>

    <select id="UserCurrencyNum_getUserCurrencyNumByUserIdForBacker" parameterType="int" resultType="BackerUserCurrencyNumDTO">
        SELECT transactionCurrencyTab.currencyId, transactionCurrencyTab.currencyName, userCurrencyNumTab.currencyNumber, userCurrencyNumTab.currencyNumberLock
        FROM user_currency_num_tab AS userCurrencyNumTab
        LEFT JOIN transaction_currency_tab AS transactionCurrencyTab ON userCurrencyNumTab.currencyId = transactionCurrencyTab.currencyId
        WHERE userCurrencyNumTab.userId = #{userId}
        ORDER BY transactionCurrencyTab.currencyId
    </select>

    <select id="UserCurrencyNum_getUserCurrencyNumByUserIdAndCurrencyId" parameterType="java.util.Map" resultType="UserCurrencyNumDO">
        SELECT userId, currencyId, currencyNumber, currencyNumberLock, addTime
        FROM user_currency_num_tab
        WHERE userId = #{userId}
          AND currencyId = #{currencyId}
    </select>

    <insert id="UserCurrencyNum_insertUserCurrencyForWeb" parameterType="java.util.List">
        INSERT INTO user_currency_num_tab(userId, currencyId, addTime)
        VALUES
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.userId},
             #{item.currencyId},
             #{item.addTime})
        </foreach>
    </insert>

    <update id="UserCurrencyNum_increaseCurrencyNumber" parameterType="UserCurrencyNumDO">
        UPDATE user_currency_num_tab
        SET currencyNumber = currencyNumber + #{currencyNumber}
        WHERE userId = #{userId}
          AND currencyId = #{currencyId}
    </update>

    <update id="UserCurrencyNum_reduceCurrencyNumber" parameterType="UserCurrencyNumDO">
        UPDATE user_currency_num_tab
        SET currencyNumber = currencyNumber - #{currencyNumber}
        WHERE userId = #{userId}
          AND currencyId = #{currencyId}
    </update>

    <update id="UserCurrencyNum_increaseCurrencyNumberLock" parameterType="UserCurrencyNumDO">
        UPDATE user_currency_num_tab
        SET currencyNumberLock = currencyNumberLock + #{currencyNumberLock}
        WHERE userId = #{userId}
          AND currencyId = #{currencyId}
    </update>

    <update id="UserCurrencyNum_reduceCurrencyNumberLock" parameterType="UserCurrencyNumDO">
        UPDATE user_currency_num_tab
        SET currencyNumberLock = currencyNumberLock - #{currencyNumberLock}
        WHERE userId = #{userId}
          AND currencyId = #{currencyId}
    </update>

    <select id="UserCurrencyNum_countCheckUserAmountForTimer" parameterType="java.util.Map" resultType="int">
        SELECT COUNT(currencyTab.userId)
        FROM user_currency_num_tab AS currencyTab
        LEFT JOIN
        (
            SELECT balanceTab.userId, balanceTab.currencyId,
                SUM(balanceTab.balanceNumber) AS balanceTotal,
                SUM(balanceTab.frozenNumber) AS frozenTotal
            FROM user_balance_tab AS balanceTab, transaction_currency_tab AS transactionCurrencyTab
            WHERE balanceTab.currencyId = transactionCurrencyTab.currencyId
            GROUP BY balanceTab.userId
            HAVING balanceTotal != 0 OR frozenTotal != 0
        ) AS balanceTempTab
        ON currencyTab.userId = balanceTempTab.userId
        AND currencyTab.currencyId = balanceTempTab.currencyId
        WHERE (currencyTab.currencyNumber - IFNULL(balanceTempTab.balanceTotal, 0)) > #{checkAmount}
        OR (currencyTab.currencyNumberLock - IFNULL(balanceTempTab.frozenTotal, 0)) > #{checkAmountLock}
    </select>

    <select id="UserCurrencyNum_listCheckUserAmountForTimer" parameterType="java.util.Map" resultType="UserAmountCheckDTO">
        SELECT currencyTab.userId, currencyTab.currencyId,
            (currencyTab.currencyNumber - IFNULL(balanceTempTab.balanceTotal, 0)) AS beyondAmount,
            (currencyTab.currencyNumberLock - IFNULL(balanceTempTab.frozenTotal, 0)) AS beyondAmountLock
        FROM user_currency_num_tab AS currencyTab
        LEFT JOIN
        (
            SELECT balanceTab.userId, balanceTab.currencyId,
                SUM(balanceTab.balanceNumber) AS balanceTotal,
                SUM(balanceTab.frozenNumber) AS frozenTotal
            FROM user_balance_tab AS balanceTab, transaction_currency_tab AS transactionCurrencyTab
            WHERE balanceTab.currencyId = transactionCurrencyTab.currencyId
            GROUP BY balanceTab.userId
            HAVING balanceTotal != 0 OR frozenTotal != 0
        ) AS balanceTempTab
        ON currencyTab.userId = balanceTempTab.userId
        AND currencyTab.currencyId = balanceTempTab.currencyId
        WHERE (currencyTab.currencyNumber - IFNULL(balanceTempTab.balanceTotal, 0)) > #{checkAmount}
        OR (currencyTab.currencyNumberLock - IFNULL(balanceTempTab.frozenTotal, 0)) > #{checkAmountLock}
        ORDER BY currencyTab.userId
        LIMIT #{startNumber}, #{pageSize}
    </select>

</mapper>