<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper PUBLIC
		"-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.jydp.dao.impl.transaction.TransactionCurrencyDaoImpl">

	<insert id="TransactionCurrency_insertTransactionCurrency" parameterType="TransactionCurrencyDO">
        INSERT INTO transaction_currency_tab
            (currencyShortName, currencyName, currencyImg, buyFee, sellFee, upRange, downRange,
             paymentType, upStatus, backerAccount, ipAddress, upTime, addTime)
        VALUES
            (#{currencyShortName}, #{currencyName}, #{currencyImg}, #{buyFee}, #{sellFee}, #{upRange},
            #{downRange}, #{paymentType}, #{upStatus}, #{backerAccount}, #{ipAddress}, #{upTime}, #{addTime})
    </insert>

	<select id="TransactionCurrency_getTransactionCurrencyByCurrencyId" parameterType="int" resultType="TransactionCurrencyVO">
        SELECT currencyId, currencyShortName, currencyName, currencyImg, buyFee, sellFee, upRange, downRange,
            paymentType, upStatus, backerAccount, ipAddress, upTime, addTime
        FROM transaction_currency_tab
        WHERE currencyId = #{currencyId}
	</select>

	<update id="TransactionCurrency_updateTransactionCurrency" parameterType="TransactionCurrencyDO">
        UPDATE transaction_currency_tab
        <set>
            currencyShortName = #{currencyShortName}, currencyName = #{currencyName},
            currencyImg = #{currencyImg}, buyFee = #{buyFee}, sellFee = #{sellFee},
            upRange = #{upRange}, downRange = #{downRange}, paymentType = #{paymentType},
            upStatus = #{upStatus}, backerAccount = #{backerAccount}, ipAddress = #{ipAddress},
            upTime = #{upTime},  addTime = #{addTime}
        </set>
        WHERE currencyId = #{currencyId}
    </update>

    <delete id="TransactionCurrency_deleteTransactionCurrencyByCurrencyId" parameterType="int">
        DELETE FROM transaction_currency_tab
        WHERE currencyId = #{currencyId}
    </delete>

    <select id="TransactionCurrency_getTransactionCurrencyListForWeb" resultType="TransactionCurrencyVO">
        SELECT  currencyId, currencyShortName, currencyName, currencyImg, buyFee, sellFee, upRange, downRange,
            paymentType, upStatus, backerAccount, ipAddress, upTime, addTime
        FROM transaction_currency_tab
        WHERE upStatus = 2
    </select>

    <select id="TransactionCurrency_getTransactionCurrencyByCurrencyName" parameterType="java.lang.String" resultType="TransactionCurrencyVO">
        SELECT  currencyId, currencyShortName, currencyName, currencyImg, buyFee, sellFee, upRange, downRange,
            paymentType, upStatus, backerAccount, ipAddress, upTime, addTime
        FROM transaction_currency_tab
        WHERE currencyName = #{currencyName}
    </select>

    <select id="TransactionCurrency_getTransactionCurrencyMarketForWeb" parameterType="java.util.Map" resultType="TransactionUserDealDTO">
        SELECT t.currencyId, t.currencyImg, t.currencyName, t.currencyShortName,
        COALESCE(getLastDealPriceByCurrencyId(t.currencyId,#{openTime}),0) AS latestPrice,
        COALESCE((SELECT MAX( p1.pendingPrice ) FROM transaction_pend_order_tab p1 WHERE p1.currencyId = t.currencyId AND p1.paymentType = 1 AND ( p1.pendingStatus = 1 OR p1.pendingStatus = 2) ),0) AS buyOnePrice,
        COALESCE((SELECT MIN( p2.pendingPrice ) FROM transaction_pend_order_tab p2 WHERE p2.currencyId = t.currencyId AND p2.paymentType = 2 AND ( p2.pendingStatus = 1 OR p2.pendingStatus = 2) ),0) AS sellOnePrice,
        COALESCE((SELECT sum(d2.currencyNumber) FROM transaction_user_deal_tab d2 WHERE d2.currencyId = t.currencyId AND d2.addTime > #{openTime} ),0) AS volume,
        COALESCE(getYesterdayLastPriceByCurrencyId(t.currencyId,#{beginTime},#{endTime}),0) as yesterdayLastPrice
        FROM transaction_currency_tab t WHERE t.upStatus = 2
    </select>

    <select id="TransactionCurrency_countTransactionCurrencyForBack" parameterType="java.util.Map" resultType="int">
        SELECT  COUNT(currencyId)
        FROM transaction_currency_tab
        <where>
            <if test="currencyName != null and currencyName !=''">
                AND currencyName LIKE CONCAT('%', #{currencyName}, '%')
            </if>
            <if test="backerAccount != null and backerAccount !=''">
                AND backerAccount LIKE CONCAT('%', #{backerAccount}, '%')
            </if>
            <if test="upStatus != 0">
                AND upStatus = #{upStatus}
            </if>
            <if test="paymentType != 0">
                AND paymentType = #{paymentType}
            </if>
            <if test="startAddTime != null">
                AND addTime <![CDATA[ >= ]]> #{startAddTime}
            </if>
            <if test="endAddTime != null">
                AND addTime <![CDATA[ <= ]]> #{endAddTime}
            </if>
            <if test="startUpTime != null">
                AND startUpTime <![CDATA[ >= ]]> #{startUpTime}
            </if>
            <if test="endUpTime != null">
                AND endUpTime <![CDATA[ <= ]]> #{endUpTime}
            </if>
        </where>
    </select>

    <select id="TransactionCurrency_listTransactionCurrencyForBack" parameterType="java.util.Map" resultType="TransactionCurrencyVO">
        SELECT  currencyId, currencyShortName, currencyName, currencyImg, buyFee, sellFee, upRange, downRange,
                 paymentType, upStatus, backerAccount, ipAddress, upTime, addTime
        FROM transaction_currency_tab
        <where>
            <if test="currencyName != null and currencyName !=''">
                AND currencyName LIKE CONCAT('%', #{currencyName}, '%')
            </if>
            <if test="backerAccount != null and backerAccount !=''">
                AND backerAccount LIKE CONCAT('%', #{backerAccount}, '%')
            </if>
            <if test="upStatus != 0">
                AND upStatus = #{upStatus}
            </if>
            <if test="paymentType != 0">
                AND paymentType = #{paymentType}
            </if>
            <if test="startAddTime != null">
                AND addTime <![CDATA[ >= ]]> #{startAddTime}
            </if>
            <if test="endAddTime != null">
                AND addTime <![CDATA[ <= ]]> #{endAddTime}
            </if>
            <if test="startUpTime != null">
                AND startUpTime <![CDATA[ >= ]]> #{startUpTime}
            </if>
            <if test="endUpTime != null">
                AND endUpTime <![CDATA[ <= ]]> #{endUpTime}
            </if>
        </where>
        ORDER BY addTime DESC
        LIMIT #{startNumber}, #{pageSize}
    </select>

    <update id="TransactionCurrency_updatePaymentType" parameterType="java.util.Map">
        UPDATE transaction_currency_tab
        SET paymentType = #{paymentType}
        WHERE currencyId = #{currencyId}
    </update>

    <update id="TransactionCurrency_updateUpStatus" parameterType="java.util.Map">
        UPDATE transaction_currency_tab
        SET upStatus = #{upStatus}
        WHERE currencyId = #{currencyId}
    </update>
</mapper>