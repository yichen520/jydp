<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper PUBLIC
		"-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.jydp.dao.impl.transaction.TransactionCurrencyDaoImpl">

	<insert id="TransactionCurrency_insertTransactionCurrency" parameterType="TransactionCurrencyDO">
        INSERT INTO transaction_currency_tab
            (currencyShortName, currencyName, currencyImg, upPrice, minPrice, buyFee,
             sellFee, upRange, downRange, paymentType, upStatus, backerAccount, ipAddress, upTime, addTime)
        VALUES
            (#{currencyShortName}, #{currencyName}, #{currencyImg}, #{upPrice}, #{minPrice}, #{buyFee}, #{sellFee},
              #{upRange}, #{downRange}, #{paymentType}, #{upStatus}, #{backerAccount}, #{ipAddress}, #{upTime}, #{addTime})
    </insert>

	<select id="TransactionCurrency_getTransactionCurrencyByCurrencyId" parameterType="int" resultType="TransactionCurrencyVO">
        SELECT currencyId, currencyShortName, currencyName, currencyImg, upPrice, minPrice, buyFee,
                sellFee, upRange, downRange, paymentType, upStatus, backerAccount, ipAddress, upTime, addTime
        FROM transaction_currency_tab
        WHERE currencyId = #{currencyId}
	</select>

	<update id="TransactionCurrency_updateTransactionCurrency" parameterType="TransactionCurrencyDO">
        UPDATE transaction_currency_tab
        SET currencyShortName = #{currencyShortName}, currencyName = #{currencyName},
            currencyImg = #{currencyImg}, upPrice = #{upPrice}, minPrice = #{minPrice}, buyFee = #{buyFee},
            sellFee = #{sellFee}, upRange = #{upRange}, downRange = #{downRange}, paymentType = #{paymentType},
            upStatus = #{upStatus}, backerAccount = #{backerAccount}, ipAddress = #{ipAddress},
            upTime = #{upTime}, addTime, addTime = #{addTime}
        WHERE currencyId = #{currencyId}
    </update>

    <delete id="TransactionCurrency_deleteTransactionCurrencyByCurrencyId" parameterType="int">
        DELETE FROM transaction_currency_tab
        WHERE currencyId = #{currencyId}
    </delete>

    <select id="TransactionCurrency_getTransactionCurrencyListForWeb" resultType="TransactionCurrencyVO">
        SELECT  currencyId, currencyShortName, currencyName, currencyImg, upPrice, minPrice, buyFee,
            sellFee, upRange, downRange, paymentType, upStatus, backerAccount, ipAddress, upTime, addTime
        FROM transaction_currency_tab
    </select>

    <select id="TransactionCurrency_getTransactionCurrencyByCurrencyName" parameterType="java.lang.String" resultType="TransactionCurrencyVO">
        SELECT  currencyId, currencyShortName, currencyName, currencyImg, upPrice, minPrice, buyFee,
            sellFee, upRange, downRange, paymentType, upStatus, backerAccount, ipAddress, upTime, addTime
        FROM transaction_currency_tab
        WHERE currencyName = #{currencyName}
    </select>

    <select id="TransactionCurrency_getTransactionCurrencyMarketForWeb" resultType="TransactionUserDealDTO">
        SELECT t.currencyId, t.currencyImg, t.currencyName, t.currencyShortName,
        COALESCE(getLastDealPriceByCurrencyId(t.currencyId),0) AS latestPrice,
        COALESCE((SELECT MAX( p1.pendingPrice ) FROM transaction_pend_order_tab p1 WHERE p1.currencyId = t.currencyId AND p1.paymentType = 1 AND ( p1.pendingStatus = 1 OR p1.pendingStatus = 2) ),0) AS buyOnePrice,
        COALESCE((SELECT MIN( p2.pendingPrice ) FROM transaction_pend_order_tab p2 WHERE p2.currencyId = t.currencyId AND p2.paymentType = 2 AND ( p2.pendingStatus = 1 OR p2.pendingStatus = 2) ),0) AS sellOnePrice,
        COALESCE((SELECT sum(d2.currencyNumber) FROM transaction_user_deal_tab d2 WHERE d2.currencyId = t.currencyId AND d2.addTime > ( NOW( ) - INTERVAL 1 DAY ) AND d2.addTime <![CDATA[ < ]]> NOW() ),0) AS volume,
        COALESCE(getYesterdayLastPriceByCurrencyId(t.currencyId),0) as yesterdayLastPrice
        FROM transaction_currency_tab t
    </select>
</mapper>